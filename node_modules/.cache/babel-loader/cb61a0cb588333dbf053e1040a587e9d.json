{"ast":null,"code":"var _jsxFileName = \"/Users/chenxuansun/Desktop/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    loading: employeeLoading,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEmployeeLoading, setIsEmployeeLoading] = useState(false);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    setIsEmployeeLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    setIsEmployeeLoading(false);\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    setIsLoading(true);\n\n    try {\n      if (employeeId === EMPTY_EMPLOYEE.id) {\n        await loadAllTransactions();\n      } else {\n        await transactionsByEmployeeUtils.fetchById(employeeId);\n      }\n    } catch (error) {\n      console.error(\"Failed to load transactions:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [loadAllTransactions, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeLoading) {\n      loadAllTransactions();\n    }\n  }, [employeeLoading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isEmployeeLoading || isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue) {\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), transactions !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: isLoading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"eKv01h5Z1ulbsLMlINfSWavqp6E=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","loading","employeeLoading","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","isEmployeeLoading","setIsEmployeeLoading","transactions","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","id","fetchById","error","console","item","value","label","firstName","lastName","newValue"],"sources":["/Users/chenxuansun/Desktop/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { Employee } from \"./utils/types\";\n\nexport function App() {\n    const { data: employees, loading: employeeLoading, ...employeeUtils } = useEmployees();\n    const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions();\n    const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee();\n    const [isLoading, setIsLoading] = useState(false);\n    const [isEmployeeLoading, setIsEmployeeLoading] = useState(false);\n\n    const transactions = useMemo(() => {\n        return paginatedTransactions?.data ?? transactionsByEmployee ?? null;\n    }, [paginatedTransactions?.data, transactionsByEmployee]);\n\n    const loadAllTransactions = useCallback(async () => {\n        setIsLoading(true);\n        setIsEmployeeLoading(true);\n        transactionsByEmployeeUtils.invalidateData();\n\n        await employeeUtils.fetchAll();\n        setIsEmployeeLoading(false);\n        await paginatedTransactionsUtils.fetchAll();\n\n        setIsLoading(false);\n    }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n\n    const loadTransactionsByEmployee = useCallback(async (employeeId: string) => {\n        setIsLoading(true);\n        try {\n            if (employeeId === EMPTY_EMPLOYEE.id) {\n                await loadAllTransactions();\n            } else {\n                await transactionsByEmployeeUtils.fetchById(employeeId);\n            }\n        } catch (error) {\n            console.error(\"Failed to load transactions:\", error);\n        } finally {\n            setIsLoading(false);\n        }\n    }, [loadAllTransactions, transactionsByEmployeeUtils]);\n\n    useEffect(() => {\n        if (employees === null && !employeeLoading) {\n            loadAllTransactions();\n        }\n    }, [employeeLoading, employees, loadAllTransactions]);\n\n    return (\n        <Fragment>\n            <main className=\"MainContainer\">\n                <Instructions />\n\n                <hr className=\"RampBreak--l\" />\n\n                <InputSelect<Employee>\n                    isLoading={isEmployeeLoading || isLoading}\n                    defaultValue={EMPTY_EMPLOYEE}\n                    items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n                    label=\"Filter by employee\"\n                    loadingLabel=\"Loading employees\"\n                    parseItem={(item) => ({\n                        value: item.id,\n                        label: `${item.firstName} ${item.lastName}`,\n                    })}\n                    onChange={async (newValue) => {\n                        if (newValue) {\n                            await loadTransactionsByEmployee(newValue.id);\n                        }\n                    }}\n                />\n\n                <div className=\"RampBreak--l\" />\n\n                <div className=\"RampGrid\">\n                    <Transactions transactions={transactions} />\n\n                    {transactions !== null && (\n                        <button\n                            className=\"RampButton\"\n                            disabled={isLoading}\n                            onClick={async () => {\n                                await loadAllTransactions();\n                            }}\n                        >\n                            View More\n                        </button>\n                    )}\n                </div>\n            </main>\n        </Fragment>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}