{"ast":null,"code":"var _jsxFileName = \"/Users/chenxuansun/Desktop/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEmployeeLoading, setIsEmployeeLoading] = useState(false); // 新增状态追踪员工数据加载\n\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    setIsEmployeeLoading(true); // 在加载所有事务前设置员工加载状态\n\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    setIsEmployeeLoading(false); // 员工数据加载完成后更新状态\n\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    // 这里添加了类型注解\n    try {\n      setIsLoading(true); // Set loading state to true before starting data fetch\n\n      if (employeeId === EMPTY_EMPLOYEE.id) {\n        await loadAllTransactions(); // Call the function to load all transactions without filtering\n      } else {\n        await transactionsByEmployeeUtils.fetchById(employeeId); // Fetch transactions for the selected employee\n      }\n    } catch (error) {\n      console.error(\"Failed to load transactions:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [loadAllTransactions, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isEmployeeLoading // 使用isEmployeeLoading代替isLoading\n        ,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), transactions !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: isLoading // 使用isLoading控制按钮状态\n          ,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"J+arKiRuWKywDTIpI9yPsecvbuQ=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","isEmployeeLoading","setIsEmployeeLoading","transactions","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","id","fetchById","error","console","loading","item","value","label","firstName","lastName","newValue"],"sources":["/Users/chenxuansun/Desktop/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import {Fragment, useCallback, useEffect, useMemo, useState} from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { Employee } from \"./utils/types\";\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees();\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions();\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEmployeeLoading, setIsEmployeeLoading] = useState(false); // 新增状态追踪员工数据加载\n\n  const transactions = useMemo(\n      () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n      [paginatedTransactions, transactionsByEmployee]\n  );\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    setIsEmployeeLoading(true); // 在加载所有事务前设置员工加载状态\n    transactionsByEmployeeUtils.invalidateData();\n\n    await employeeUtils.fetchAll();\n    setIsEmployeeLoading(false); // 员工数据加载完成后更新状态\n    await paginatedTransactionsUtils.fetchAll();\n\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n\n    const loadTransactionsByEmployee = useCallback(\n        async (employeeId: string) => { // 这里添加了类型注解\n            try {\n                setIsLoading(true); // Set loading state to true before starting data fetch\n                if (employeeId === EMPTY_EMPLOYEE.id) {\n                    await loadAllTransactions(); // Call the function to load all transactions without filtering\n                } else {\n                    await transactionsByEmployeeUtils.fetchById(employeeId); // Fetch transactions for the selected employee\n                }\n            } catch (error) {\n                console.error(\"Failed to load transactions:\", error);\n            } finally {\n                setIsLoading(false);\n            }\n        },\n        [loadAllTransactions, transactionsByEmployeeUtils]\n    );\n\n\n    useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n\n  return (\n      <Fragment>\n        <main className=\"MainContainer\">\n          <Instructions />\n\n          <hr className=\"RampBreak--l\" />\n\n          <InputSelect<Employee>\n              isLoading={isEmployeeLoading} // 使用isEmployeeLoading代替isLoading\n              defaultValue={EMPTY_EMPLOYEE}\n              items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n              label=\"Filter by employee\"\n              loadingLabel=\"Loading employees\"\n              parseItem={(item) => ({\n                value: item.id,\n                label: `${item.firstName} ${item.lastName}`,\n              })}\n              onChange={async (newValue) => {\n                if (newValue === null) {\n                  return;\n                }\n\n                await loadTransactionsByEmployee(newValue.id);\n              }}\n          />\n\n          <div className=\"RampBreak--l\" />\n\n          <div className=\"RampGrid\">\n            <Transactions transactions={transactions} />\n\n            {transactions !== null && (\n                <button\n                    className=\"RampButton\"\n                    disabled={isLoading} // 使用isLoading控制按钮状态\n                    onClick={async () => {\n                      await loadAllTransactions();\n                    }}\n                >\n                  View More\n                </button>\n            )}\n          </div>\n        </main>\n      </Fragment>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}