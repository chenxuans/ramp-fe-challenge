{"ast":null,"code":"var _jsxFileName = \"/Users/chenxuansun/Desktop/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [showViewMore, setShowViewMore] = useState(true);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n    setShowViewMore((paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null);\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils, paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n    setShowViewMore(false);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if ((paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) === null && !!(paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data)) {\n      setShowViewMore(false);\n    }\n  }, [paginatedTransactions]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          if (newValue.firstName === \"All\" && newValue.lastName === \"Employees\") {\n            loadAllTransactions();\n            setShowViewMore(true);\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), transactions !== null && showViewMore && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"+xD/CP83sq0Hu5yc7zRtpGVQuhM=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","showViewMore","setShowViewMore","transactions","loadAllTransactions","invalidateData","fetchAll","nextPage","loadTransactionsByEmployee","employeeId","fetchById","loading","item","value","id","label","firstName","lastName","newValue"],"sources":["/Users/chenxuansun/Desktop/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n    const { data: employees, ...employeeUtils } = useEmployees()\n    const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n    const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n    const [isLoading, setIsLoading] = useState(false)\n    const [showViewMore, setShowViewMore] = useState(true)\n\n    const transactions = useMemo(\n        () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n        [paginatedTransactions, transactionsByEmployee]\n    )\n\n    const loadAllTransactions = useCallback(async () => {\n        setIsLoading(true);\n        transactionsByEmployeeUtils.invalidateData();\n\n        await employeeUtils.fetchAll();\n        await paginatedTransactionsUtils.fetchAll();\n\n\n        setShowViewMore(paginatedTransactions?.nextPage !== null);\n        setIsLoading(false);\n    }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils, paginatedTransactions?.nextPage]);\n\n\n    const loadTransactionsByEmployee = useCallback(\n        async (employeeId: string) => {\n            paginatedTransactionsUtils.invalidateData()\n            await transactionsByEmployeeUtils.fetchById(employeeId)\n            setShowViewMore(false)\n        },\n        [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n    )\n\n    useEffect(() => {\n        if (paginatedTransactions?.nextPage === null && !!paginatedTransactions?.data) {\n            setShowViewMore(false)\n        }\n    }, [paginatedTransactions])\n\n    useEffect(() => {\n        if (employees === null && !employeeUtils.loading) {\n            loadAllTransactions()\n        }\n    }, [employeeUtils.loading, employees, loadAllTransactions])\n\n    return (\n        <Fragment>\n            <main className=\"MainContainer\">\n                <Instructions />\n\n                <hr className=\"RampBreak--l\" />\n\n                <InputSelect<Employee>\n                    isLoading={isLoading}\n                    defaultValue={EMPTY_EMPLOYEE}\n                    items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n                    label=\"Filter by employee\"\n                    loadingLabel=\"Loading employees\"\n                    parseItem={(item) => ({\n                        value: item.id,\n                        label: `${item.firstName} ${item.lastName}`,\n                    })}\n                    onChange={async (newValue) => {\n                        if (newValue === null) {\n                            return\n                        }\n\n\n                        if (newValue.firstName === \"All\" && newValue.lastName === \"Employees\") {\n                            loadAllTransactions()\n                            setShowViewMore(true)\n                            return\n                        }\n\n                        await loadTransactionsByEmployee(newValue.id)\n                    }}\n                />\n\n                <div className=\"RampBreak--l\" />\n\n                <div className=\"RampGrid\">\n                    <Transactions transactions={transactions} />\n\n                    {transactions !== null && showViewMore && (\n                        <button\n                            className=\"RampButton\"\n                            disabled={paginatedTransactionsUtils.loading}\n                            onClick={async () => {\n                                await loadAllTransactions()\n                            }}\n                        >\n                            View More\n                        </button>\n                    )}\n                </div>\n            </main>\n        </Fragment>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}