{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    // Check if there is a next page. If 'nextPage' is not defined, it means we've reached the end of the data.\n    const nextPage = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage; // If 'nextPage' is null or undefined, do not perform any fetch as we have reached the end of the data.\n\n    if (nextPage === null || nextPage === undefined) {\n      return;\n    } // Perform the fetch operation for the next page.\n\n\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: nextPage\n    }); // Update the state with the new transactions, appending them to the list of existing transactions.\n\n    setPaginatedTransactions(previousResponse => {\n      // If the response is null, which means no new data was fetched, we just return the previous state.\n      if (response === null) {\n        return previousResponse;\n      } // If there was no previous data, or we're fetching the first page, we use the response as is.\n\n\n      if (previousResponse === null || nextPage === 0) {\n        return response;\n      } // Merge the new transactions with the existing ones.\n\n\n      return { ...response,\n        // Use the new response's structure.\n        data: [...previousResponse.data, ...response.data],\n        // Combine the old data with the new data.\n        nextPage: response.nextPage // Update to the new nextPage.\n\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null); // Reset the pagination data if we need to start over or if there is an error.\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","nextPage","undefined","response","page","previousResponse","data","invalidateData"],"sources":["/Users/chenxuansun/Desktop/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<Transaction[]> | null>(null);\n\n  const fetchAll = useCallback(async () => {\n    // Check if there is a next page. If 'nextPage' is not defined, it means we've reached the end of the data.\n    const nextPage = paginatedTransactions?.nextPage;\n\n    // If 'nextPage' is null or undefined, do not perform any fetch as we have reached the end of the data.\n    if (nextPage === null || nextPage === undefined) {\n      return;\n    }\n\n    // Perform the fetch operation for the next page.\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n        \"paginatedTransactions\",\n        { page: nextPage }\n    );\n\n    // Update the state with the new transactions, appending them to the list of existing transactions.\n    setPaginatedTransactions((previousResponse) => {\n      // If the response is null, which means no new data was fetched, we just return the previous state.\n      if (response === null) {\n        return previousResponse;\n      }\n\n      // If there was no previous data, or we're fetching the first page, we use the response as is.\n      if (previousResponse === null || nextPage === 0) {\n        return response;\n      }\n\n      // Merge the new transactions with the existing ones.\n      return {\n        ...response, // Use the new response's structure.\n        data: [...previousResponse.data, ...response.data], // Combine the old data with the new data.\n        nextPage: response.nextPage // Update to the new nextPage.\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null); // Reset the pagination data if we need to start over or if there is an error.\n  }, []);\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData };\n}\n\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAA0C,IAA1C,CAAlE;EAEA,MAAMO,QAAQ,GAAGR,WAAW,CAAC,YAAY;IACvC;IACA,MAAMS,QAAQ,GAAGH,qBAAH,aAAGA,qBAAH,uBAAGA,qBAAqB,CAAEG,QAAxC,CAFuC,CAIvC;;IACA,IAAIA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAKC,SAAtC,EAAiD;MAC/C;IACD,CAPsC,CASvC;;;IACA,MAAMC,QAAQ,GAAG,MAAMP,cAAc,CACjC,uBADiC,EAEjC;MAAEQ,IAAI,EAAEH;IAAR,CAFiC,CAArC,CAVuC,CAevC;;IACAF,wBAAwB,CAAEM,gBAAD,IAAsB;MAC7C;MACA,IAAIF,QAAQ,KAAK,IAAjB,EAAuB;QACrB,OAAOE,gBAAP;MACD,CAJ4C,CAM7C;;;MACA,IAAIA,gBAAgB,KAAK,IAArB,IAA6BJ,QAAQ,KAAK,CAA9C,EAAiD;QAC/C,OAAOE,QAAP;MACD,CAT4C,CAW7C;;;MACA,OAAO,EACL,GAAGA,QADE;QACQ;QACbG,IAAI,EAAE,CAAC,GAAGD,gBAAgB,CAACC,IAArB,EAA2B,GAAGH,QAAQ,CAACG,IAAvC,CAFD;QAE+C;QACpDL,QAAQ,EAAEE,QAAQ,CAACF,QAHd,CAGuB;;MAHvB,CAAP;IAKD,CAjBuB,CAAxB;EAkBD,CAlC2B,EAkCzB,CAACL,cAAD,EAAiBE,qBAAjB,CAlCyB,CAA5B;EAoCA,MAAMS,cAAc,GAAGf,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB,CADuC,CACP;EACjC,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEO,IAAI,EAAER,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDO;EAAlD,CAAP;AACD;;GA7CeZ,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}