{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    var _paginatedTransaction;\n\n    const nextPage = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : 0;\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null) {\n        return previousResponse; // If no new data, keep the previous data\n      }\n\n      if (previousResponse === null || nextPage === 0) {\n        return response; // If there was no previous data or it's the first page, start with the response\n      } // Merge the new transactions with the existing ones\n\n\n      return { ...response,\n        // Keep the new response's structure\n        data: [...previousResponse.data, ...response.data],\n        // Combine the old data with the new data\n        nextPage: response.nextPage // Update to the new nextPage\n\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null); // Reset the pagination data\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","nextPage","response","page","previousResponse","data","invalidateData"],"sources":["/Users/chenxuansun/Desktop/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<Transaction[]> | null>(null);\n\n  const fetchAll = useCallback(async () => {\n    const nextPage = paginatedTransactions?.nextPage ?? 0;\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n        \"paginatedTransactions\",\n        { page: nextPage }\n    );\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null) {\n        return previousResponse; // If no new data, keep the previous data\n      }\n\n      if (previousResponse === null || nextPage === 0) {\n        return response; // If there was no previous data or it's the first page, start with the response\n      }\n\n      // Merge the new transactions with the existing ones\n      return {\n        ...response, // Keep the new response's structure\n        data: [...previousResponse.data, ...response.data], // Combine the old data with the new data\n        nextPage: response.nextPage // Update to the new nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null); // Reset the pagination data\n  }, []);\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData };\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAA0C,IAA1C,CAAlE;EAEA,MAAMO,QAAQ,GAAGR,WAAW,CAAC,YAAY;IAAA;;IACvC,MAAMS,QAAQ,4BAAGH,qBAAH,aAAGA,qBAAH,uBAAGA,qBAAqB,CAAEG,QAA1B,yEAAsC,CAApD;IACA,MAAMC,QAAQ,GAAG,MAAMN,cAAc,CACjC,uBADiC,EAEjC;MAAEO,IAAI,EAAEF;IAAR,CAFiC,CAArC;IAKAF,wBAAwB,CAAEK,gBAAD,IAAsB;MAC7C,IAAIF,QAAQ,KAAK,IAAjB,EAAuB;QACrB,OAAOE,gBAAP,CADqB,CACI;MAC1B;;MAED,IAAIA,gBAAgB,KAAK,IAArB,IAA6BH,QAAQ,KAAK,CAA9C,EAAiD;QAC/C,OAAOC,QAAP,CAD+C,CAC9B;MAClB,CAP4C,CAS7C;;;MACA,OAAO,EACL,GAAGA,QADE;QACQ;QACbG,IAAI,EAAE,CAAC,GAAGD,gBAAgB,CAACC,IAArB,EAA2B,GAAGH,QAAQ,CAACG,IAAvC,CAFD;QAE+C;QACpDJ,QAAQ,EAAEC,QAAQ,CAACD,QAHd,CAGuB;;MAHvB,CAAP;IAKD,CAfuB,CAAxB;EAgBD,CAvB2B,EAuBzB,CAACL,cAAD,EAAiBE,qBAAjB,CAvByB,CAA5B;EAyBA,MAAMQ,cAAc,GAAGd,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB,CADuC,CACP;EACjC,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEM,IAAI,EAAEP,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDM;EAAlD,CAAP;AACD;;GAlCeX,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}