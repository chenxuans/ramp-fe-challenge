{"ast":null,"code":"var _jsxFileName = \"/Users/chenxuansun/Desktop/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { TransactionPane } from \"./components/TransactionPane\";\nimport { Instructions } from \"./components/Instructions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    setIsLoading(false);\n    await paginatedTransactionsUtils.fetchAll();\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          } else if (newValue.id === \"\") {\n            await loadAllTransactions();\n          } else await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: transactions === null ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampLoading--container\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            \"data-testid\": \"transaction-container\",\n            children: transactions.map(transaction => /*#__PURE__*/_jsxDEV(TransactionPane, {\n              transaction: transaction\n            }, transaction.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"RampButton\",\n            disabled: paginatedTransactionsUtils.loading || (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) == null || (transactionsByEmployee === null || transactionsByEmployee === void 0 ? void 0 : transactionsByEmployee.length) === 0,\n            onClick: async () => {\n              await loadAllTransactions();\n            },\n            children: \"View More\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"yXHk/2qvl++XLkP2SZkJsf+Vph0=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","TransactionPane","Instructions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","transactions","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","loading","item","value","id","label","firstName","lastName","newValue","map","transaction","nextPage","length"],"sources":["/Users/chenxuansun/Desktop/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { Employee } from \"./utils/types\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { TransactionPane } from \"./components/TransactionPane\"\nimport { Instructions } from \"./components/Instructions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\n\nexport function App() {\n    const { data: employees, ...employeeUtils } = useEmployees()\n    const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n    const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n    const [isLoading, setIsLoading] = useState(false)\n\n    const transactions = useMemo(\n        () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n        [paginatedTransactions, transactionsByEmployee]\n    )\n\n    const loadAllTransactions = useCallback(async () => {\n        setIsLoading(true)\n        transactionsByEmployeeUtils.invalidateData()\n\n        await employeeUtils.fetchAll()\n        setIsLoading(false)\n        await paginatedTransactionsUtils.fetchAll()\n\n    }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n    const loadTransactionsByEmployee = useCallback(\n        async (employeeId: string) => {\n            paginatedTransactionsUtils.invalidateData()\n            await transactionsByEmployeeUtils.fetchById(employeeId)\n        },\n        [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n    )\n\n    useEffect(() => {\n        if (employees === null && !employeeUtils.loading) {\n            loadAllTransactions()\n        }\n    }, [employeeUtils.loading, employees, loadAllTransactions])\n\n    return (\n        <Fragment>\n            <main className=\"MainContainer\">\n                <Instructions />\n\n                <hr className=\"RampBreak--l\" />\n\n                <InputSelect<Employee>\n                    isLoading={isLoading}\n                    defaultValue={EMPTY_EMPLOYEE}\n                    items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n                    label=\"Filter by employee\"\n                    loadingLabel=\"Loading employees\"\n                    parseItem={(item) => ({\n                        value: item.id,\n                        label: `${item.firstName} ${item.lastName}`,\n                    })}\n                    onChange={async (newValue) => {\n                        if (newValue === null) {\n                            return\n                        }\n                        else if (newValue.id === \"\") {\n                            await loadAllTransactions()\n                        }\n                        else await loadTransactionsByEmployee(newValue.id)\n                    }}\n                />\n\n                <div className=\"RampBreak--l\" />\n\n                <div className=\"RampGrid\">\n                    {transactions === null ? (\n                        <div className=\"RampLoading--container\">Loading...</div>\n                    ) : (\n                        <Fragment>\n                            <div data-testid=\"transaction-container\">\n                                {transactions.map((transaction) => (\n                                    <TransactionPane key={transaction.id} transaction={transaction} />\n                                ))}\n                            </div>\n                            <button\n                                className=\"RampButton\"\n                                disabled={paginatedTransactionsUtils.loading || paginatedTransactions?.nextPage == null || transactionsByEmployee?.length === 0}\n                                onClick={async () => {\n                                    await loadAllTransactions()\n                                }}\n                            >\n                                View More\n                            </button>\n                        </Fragment>\n                    )}\n                </div>\n            </main>\n        </Fragment>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}