{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    var _paginatedTransaction;\n\n    // Determine the next page to fetch. If no data has been fetched yet, start from page 0.\n    const nextPage = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : 0; // Only attempt to fetch more data if there is a 'nextPage' value.\n\n    if (nextPage === 0 || nextPage) {\n      const response = await fetchWithCache(\"paginatedTransactions\", {\n        page: nextPage\n      });\n      setPaginatedTransactions(previousResponse => {\n        // If the response is null, which means no new data was fetched, we just return the previous state.\n        if (response === null) {\n          return previousResponse;\n        } // If there was no previous data, or we're fetching the first page, we use the response as is.\n\n\n        if (previousResponse === null || nextPage === 0) {\n          return response;\n        } // Merge the new transactions with the existing ones.\n\n\n        return { ...response,\n          // Use the new response's structure.\n          data: [...previousResponse.data, ...response.data],\n          // Combine the old data with the new data.\n          nextPage: response.nextPage // Update to the new nextPage.\n\n        };\n      });\n    }\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null); // Reset the pagination data if we need to start over.\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","nextPage","response","page","previousResponse","data","invalidateData"],"sources":["/Users/chenxuansun/Desktop/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<Transaction[]> | null>(null);\n\n  const fetchAll = useCallback(async () => {\n    // Determine the next page to fetch. If no data has been fetched yet, start from page 0.\n    const nextPage = paginatedTransactions?.nextPage ?? 0;\n\n    // Only attempt to fetch more data if there is a 'nextPage' value.\n    if (nextPage === 0 || nextPage) {\n      const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n          \"paginatedTransactions\",\n          { page: nextPage }\n      );\n\n      setPaginatedTransactions((previousResponse) => {\n        // If the response is null, which means no new data was fetched, we just return the previous state.\n        if (response === null) {\n          return previousResponse;\n        }\n\n        // If there was no previous data, or we're fetching the first page, we use the response as is.\n        if (previousResponse === null || nextPage === 0) {\n          return response;\n        }\n\n        // Merge the new transactions with the existing ones.\n        return {\n          ...response, // Use the new response's structure.\n          data: [...previousResponse.data, ...response.data], // Combine the old data with the new data.\n          nextPage: response.nextPage // Update to the new nextPage.\n        };\n      });\n    }\n  }, [fetchWithCache, paginatedTransactions]);\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null); // Reset the pagination data if we need to start over.\n  }, []);\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData };\n}\n\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAA0C,IAA1C,CAAlE;EAEA,MAAMO,QAAQ,GAAGR,WAAW,CAAC,YAAY;IAAA;;IACvC;IACA,MAAMS,QAAQ,4BAAGH,qBAAH,aAAGA,qBAAH,uBAAGA,qBAAqB,CAAEG,QAA1B,yEAAsC,CAApD,CAFuC,CAIvC;;IACA,IAAIA,QAAQ,KAAK,CAAb,IAAkBA,QAAtB,EAAgC;MAC9B,MAAMC,QAAQ,GAAG,MAAMN,cAAc,CACjC,uBADiC,EAEjC;QAAEO,IAAI,EAAEF;MAAR,CAFiC,CAArC;MAKAF,wBAAwB,CAAEK,gBAAD,IAAsB;QAC7C;QACA,IAAIF,QAAQ,KAAK,IAAjB,EAAuB;UACrB,OAAOE,gBAAP;QACD,CAJ4C,CAM7C;;;QACA,IAAIA,gBAAgB,KAAK,IAArB,IAA6BH,QAAQ,KAAK,CAA9C,EAAiD;UAC/C,OAAOC,QAAP;QACD,CAT4C,CAW7C;;;QACA,OAAO,EACL,GAAGA,QADE;UACQ;UACbG,IAAI,EAAE,CAAC,GAAGD,gBAAgB,CAACC,IAArB,EAA2B,GAAGH,QAAQ,CAACG,IAAvC,CAFD;UAE+C;UACpDJ,QAAQ,EAAEC,QAAQ,CAACD,QAHd,CAGuB;;QAHvB,CAAP;MAKD,CAjBuB,CAAxB;IAkBD;EACF,CA9B2B,EA8BzB,CAACL,cAAD,EAAiBE,qBAAjB,CA9ByB,CAA5B;EAgCA,MAAMQ,cAAc,GAAGd,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB,CADuC,CACP;EACjC,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEM,IAAI,EAAEP,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDM;EAAlD,CAAP;AACD;;GAzCeX,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}