{"ast":null,"code":"var _jsxFileName = \"/Users/chenxuansun/Desktop/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { InputCheckbox } from \"../InputCheckbox\";\nimport { useCustomFetch } from \"../../hooks/useCustomFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionPane = _ref => {\n  _s();\n\n  let {\n    transaction,\n    loading,\n    setTransactionApproval: consumerSetTransactionApproval\n  } = _ref;\n  const [approved, setApproved] = useState(transaction.approved);\n  const {\n    clearCache\n  } = useCustomFetch();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"RampPane\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampPane--content\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText\",\n        children: [transaction.merchant, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: moneyFormatter.format(transaction.amount)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText--hushed RampText--s\",\n        children: [transaction.employee.firstName, \" \", transaction.employee.lastName, \" - \", transaction.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InputCheckbox, {\n      id: transaction.id,\n      checked: approved,\n      disabled: loading,\n      onChange: async newValue => {\n        await consumerSetTransactionApproval({\n          transactionId: transaction.id,\n          newValue\n        });\n        await clearCache();\n        setApproved(newValue);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TransactionPane, \"EGnbG8VYldHAyxtYWi7uzaEWTs4=\", false, function () {\n  return [useCustomFetch];\n});\n\n_c = TransactionPane;\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\"\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionPane\");","map":{"version":3,"names":["useState","InputCheckbox","useCustomFetch","TransactionPane","transaction","loading","setTransactionApproval","consumerSetTransactionApproval","approved","setApproved","clearCache","merchant","moneyFormatter","format","amount","employee","firstName","lastName","date","id","newValue","transactionId","Intl","NumberFormat","style","currency"],"sources":["/Users/chenxuansun/Desktop/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\"\nimport { InputCheckbox } from \"../InputCheckbox\"\nimport { TransactionPaneComponent } from \"./types\"\nimport { useCustomFetch } from \"../../hooks/useCustomFetch\"\n\nexport const TransactionPane: TransactionPaneComponent = ({\n                                                              transaction,\n                                                              loading,\n                                                              setTransactionApproval: consumerSetTransactionApproval,\n                                                          }) => {\n    const [approved, setApproved] = useState(transaction.approved)\n    const { clearCache } = useCustomFetch()\n\n    return (\n        <div className=\"RampPane\">\n            <div className=\"RampPane--content\">\n                <p className=\"RampText\">{transaction.merchant} </p>\n                <b>{moneyFormatter.format(transaction.amount)}</b>\n                <p className=\"RampText--hushed RampText--s\">\n                    {transaction.employee.firstName} {transaction.employee.lastName} - {transaction.date}\n                </p>\n            </div>\n            <InputCheckbox\n                id={transaction.id}\n                checked={approved}\n                disabled={loading}\n                onChange={async (newValue) => {\n                    await consumerSetTransactionApproval({\n                        transactionId: transaction.id,\n                        newValue,\n                    })\n\n                    await clearCache()\n                    setApproved(newValue)\n                }}\n            />\n        </div>\n    )\n}\n\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n})\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,kBAA9B;AAEA,SAASC,cAAT,QAA+B,4BAA/B;;AAEA,OAAO,MAAMC,eAAyC,GAAG,QAIO;EAAA;;EAAA,IAJN;IACIC,WADJ;IAEIC,OAFJ;IAGIC,sBAAsB,EAAEC;EAH5B,CAIM;EAC5D,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAACI,WAAW,CAACI,QAAb,CAAxC;EACA,MAAM;IAAEE;EAAF,IAAiBR,cAAc,EAArC;EAEA,oBACI;IAAK,SAAS,EAAC,UAAf;IAAA,wBACI;MAAK,SAAS,EAAC,mBAAf;MAAA,wBACI;QAAG,SAAS,EAAC,UAAb;QAAA,WAAyBE,WAAW,CAACO,QAArC;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAA,UAAIC,cAAc,CAACC,MAAf,CAAsBT,WAAW,CAACU,MAAlC;MAAJ;QAAA;QAAA;QAAA;MAAA,QAFJ,eAGI;QAAG,SAAS,EAAC,8BAAb;QAAA,WACKV,WAAW,CAACW,QAAZ,CAAqBC,SAD1B,OACsCZ,WAAW,CAACW,QAAZ,CAAqBE,QAD3D,SACwEb,WAAW,CAACc,IADpF;MAAA;QAAA;QAAA;QAAA;MAAA,QAHJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAQI,QAAC,aAAD;MACI,EAAE,EAAEd,WAAW,CAACe,EADpB;MAEI,OAAO,EAAEX,QAFb;MAGI,QAAQ,EAAEH,OAHd;MAII,QAAQ,EAAE,MAAOe,QAAP,IAAoB;QAC1B,MAAMb,8BAA8B,CAAC;UACjCc,aAAa,EAAEjB,WAAW,CAACe,EADM;UAEjCC;QAFiC,CAAD,CAApC;QAKA,MAAMV,UAAU,EAAhB;QACAD,WAAW,CAACW,QAAD,CAAX;MACH;IAZL;MAAA;MAAA;MAAA;IAAA,QARJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAyBH,CAjCM;;GAAMjB,e;UAMcD,c;;;KANdC,e;AAmCb,MAAMS,cAAc,GAAG,IAAIU,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;EAClDC,KAAK,EAAE,UAD2C;EAElDC,QAAQ,EAAE;AAFwC,CAA/B,CAAvB"},"metadata":{},"sourceType":"module"}